#!/usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'
require 'csv'
require 'fog'
require 'optparse'
require 'pp'
require 'yaml'

def parse_args
  options = {}

  opt_parser = OptionParser.new do |opts|
    opts.banner = "Usage: #{File.basename($0)} [options] [TYPE]"
    opts.separator ''
    opts.separator 'Available Options:'

    opts.on('-A', '--sort-asc', '=ATTRIBUTE', 'Sort ascending') do |v|
      options[:sortAsc] = v
    end
    opts.on('-D', '--sort-desc', '=ATTRIBUTE', 'Sort descending') do |v|
      options[:sortDesc] = v
    end

    opts.on('-c', '--credential', '=GROUP', 'fog credential group') do |v|
      options[:credential] = v
    end

    opts.on('--fields', '=NAMES', 'Attribute or metadata key names') do |v|
      options[:fields] = v
    end

    opts.on('--format', '=ATTRIBUTE', 'Data formaat to retrieve: records, idrecords, references') do |v|
      options[:format] = v
    end

    opts.on('--filter', '=FILTER', 'Filter expression') do |v|
      options[:filter] += v.split(',')
    end

    opts.on('-o', '--output-format', '=FORMAT', 'Output format: csv, tsv') do |v|
      # TODO: validate!
      options[:output_format] = v.downcase
    end

    opts.on_tail("-h", "--help", "Show usage instructions") do
      Kernel.abort opts.to_s
    end
  end

  begin
    opt_parser.parse!
  rescue OptionParser::InvalidOption, OptionParser::MissingArgument => e
    Kernel.abort "#{$0}: #{e.message}"
  end

  #if ARGV.size > 1
  #  Kernel.abort opt_parser
  #end

  options
end

options = parse_args

Fog.credential = options.delete(:credential) if options[:credential]
vcloud = Fog::Compute::VcloudDirector.new

if ARGV.size == 0
  query_list = vcloud.get_execute_query.body
  queries = {}
  type_width = 0
  query_list[:Link].select do |link|
    link[:rel] == 'down'
  end.map do |link|
    href = Nokogiri::XML.fragment(link[:href])
    query = CGI.parse(URI.parse(href.text).query)
    [query['type'].first, query['format'].first]
  end.each do |type, format|
    queries[type] ||= []
    queries[type] << format
    type_width = [type_width, type.size].max
  end
  queries.keys.sort.each do |type|
    puts "%-#{type_width}s %s" % [type, queries[type].sort.join(',')]
  end
  Kernel.exit(0)
end

options[:page] = 1
begin
  begin
    response = vcloud.get_execute_query(type=ARGV.first, options)
  rescue Fog::Compute::VcloudDirector::BadRequest, Fog::Compute::VcloudDirector::Forbidden => e
    Kernel.abort("#{File.basename($0)}: #{e.message}")
  end
  records = response.body.keys.detect {|key| key.to_s =~ /Record|Reference$/}
  break if response.body[records].nil? || response.body[records].empty?
  response.body[records] = [response.body[records]] if response.body[records].is_a?(Hash)
  case options[:output_format]
  when 'yaml'
    puts YAML.dump(response.body)
  when 'raw'
    pp response.body
  when 'csv'
    csv_string = CSV.generate do |csv|
      if options[:page] == 1
        csv << response.body[records].first.keys
      end
      response.body[records].each do |record|
        csv << record.values
      end
    end
    puts csv_string
  else
    puts response.body[records].first.keys.join("\t") if options[:page] == 1
    response.body[records].each do |record|
      puts record.values.join("\t")
    end
  end
  options[:page] = response.body[:nextPage]
end until options[:page].nil?
